package com.example.dokoniewski.service;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

import com.example.dokoniewski.domain.Monitor;

public class MonitorManager {

	private Connection connection;

	private static final String URL = "jdbc:hsqldb:hsql://localhost/workdb";
	private static final String CREATE_TABLE_MONITOR = "CREATE TABLE Monitor(id bigint GENERATED BY DEFAULT AS IDENTITY, brand varchar(20), pixels integer)";

	private PreparedStatement addMonitorStmt;
	private PreparedStatement deleteAllMonitorsStmt;
	private PreparedStatement getAllMonitorsStmt;
	private PreparedStatement deleteMonitorStmt;
	private PreparedStatement updateMonitorStmt;

	private Statement statement;

	public MonitorManager() {
		try {
			connection = DriverManager.getConnection(URL);
			statement = connection.createStatement();

			ResultSet rs = connection.getMetaData().getTables(null, null, null,
					null);
			boolean tableExists = false;
			while (rs.next()) {
				if ("Monitor".equalsIgnoreCase(rs.getString("TABLE_NAME"))) {
					tableExists = true;
					break;
				}
			}

			if (!tableExists)
				statement.executeUpdate(CREATE_TABLE_MONITOR);

			addMonitorStmt = connection
					.prepareStatement("INSERT INTO Monitor (brand, pixels) VALUES (?, ?)");
			deleteAllMonitorsStmt = connection
					.prepareStatement("DELETE FROM Monitor");
			getAllMonitorsStmt = connection
					.prepareStatement("SELECT id, brand, pixels FROM Monitor");
			deleteMonitorStmt = connection
					.prepareStatement("DELETE FROM Monitor WHERE id = ?");
			updateMonitorStmt = connection
					.prepareStatement("UPDATE Monitor SET brand = ?, pixels = ? WHERE id = ?");
			
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}

	public Connection getConnection() {
		return connection;
	}

	public void clearMonitors() {
		try {
			deleteAllMonitorsStmt.executeUpdate();
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}

	public int addMonitor(Monitor monitor) {
		int count = 0;
		try {
			addMonitorStmt.setString(1, monitor.getBrand());
			addMonitorStmt.setInt(2, monitor.getPixels());

			count = addMonitorStmt.executeUpdate();

		} catch (SQLException e) {
			e.printStackTrace();
		}
		return count;
	}
	
	public int deleteMonitor(Monitor monitor){
		int count = 0;
		try {
			deleteMonitorStmt.setLong(1, monitor.getId());
			
			count = deleteMonitorStmt.executeUpdate();
			
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return count;
	}
	
	public int updateMonitor(Monitor monitor, String brand, int pixels){
		int count = 0;
		try{
			updateMonitorStmt.setString(1, brand);
			updateMonitorStmt.setInt(2, pixels);
			updateMonitorStmt.setLong(3, monitor.getId());
			
			count = updateMonitorStmt.executeUpdate();
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return count;
	}

	public List<Monitor> getAllMonitors() {
		List<Monitor> monitors = new ArrayList<Monitor>();

		try {
			ResultSet rs = getAllMonitorsStmt.executeQuery();

			while (rs.next()) {
				Monitor m = new Monitor();
				m.setId(rs.getInt("id"));
				m.setBrand(rs.getString("brand"));
				m.setPixels(rs.getInt("pixels"));
				monitors.add(m);
			}

		} catch (SQLException e) {
			e.printStackTrace();
		}
		return monitors;
	}

	public List<Monitor> getMonitor(Long id) {
		List<Monitor> monitors = new ArrayList<Monitor>();
		try {
			ResultSet rs = getAllMonitorsStmt.executeQuery();

			while (rs.next()) {
				Monitor m = new Monitor();
				m.setId(rs.getInt("id"));
				m.setBrand(rs.getString("brand"));
				m.setPixels(rs.getInt("pixels"));
				if(m.getId() == id){
					monitors.add(m);
				}
			}
		} catch (SQLException e) {
			e.printStackTrace();
		}

		return monitors;
	}

	public List<Monitor> getMonitorByPixels(int pixels) {
		List<Monitor> monitors = new ArrayList<Monitor>();
		try {
			ResultSet rs = getAllMonitorsStmt.executeQuery();

			while (rs.next()) {
				Monitor m = new Monitor();
				m.setId(rs.getInt("id"));
				m.setBrand(rs.getString("brand"));
				m.setPixels(rs.getInt("pixels"));
				if(m.getPixels() == pixels){
					monitors.add(m);
				}
			}
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return monitors;
	}
}
