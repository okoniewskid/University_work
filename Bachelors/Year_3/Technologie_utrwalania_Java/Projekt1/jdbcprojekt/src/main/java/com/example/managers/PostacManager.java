package com.example.managers;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;
import com.example.tables.Postac;

public class PostacManager {
	
	private Connection connection;
	
	private String url = "jdbc:hsqldb:hsql://localhost/workdb";
	
	private String createTablePostac = "CREATE TABLE Postac(id bigint UNIQUE GENERATED BY DEFAULT AS IDENTITY, gracz varchar(20), nazwa varchar(20), bronId bigint, FOREIGN KEY (bronId) REFERENCES Bron(id) ON DELETE SET NULL)";
	
	private PreparedStatement addPostacStmt;
	private PreparedStatement deleteAllPostacStmt;
	private PreparedStatement getAllPostacStmt;
	private PreparedStatement deletePostacStmt;
	private PreparedStatement updatePostacStmt;
	private Statement statement;
	
	public PostacManager() {
		try {
			connection = DriverManager.getConnection(url);
			statement = connection.createStatement();
			ResultSet rs = connection.getMetaData().getTables(null, null, null,
							null);
			boolean tableExists = false;
			while (rs.next()) {
				if ("Postac".equalsIgnoreCase(rs.getString("TABLE_NAME"))) {
						tableExists = true;
						break;
				}
			}
			
			if (!tableExists)
					statement.executeUpdate(createTablePostac);
			addPostacStmt = connection
					.prepareStatement("INSERT INTO Postac (gracz, nazwa) VALUES (?, ?)");
			deletePostacStmt = connection
					.prepareStatement("DELETE FROM Postac WHERE id=?");
			deleteAllPostacStmt = connection
					.prepareStatement("DELETE FROM Postac");
			updatePostacStmt = connection
					.prepareStatement("UPDATE Postac SET bronId=? WHERE id=?");
			getAllPostacStmt = connection
					.prepareStatement("SELECT id, gracz, nazwa, bronId FROM Postac");
		} catch (SQLException e) {
				e.printStackTrace();
		}
	}
	
	Connection getConnection() {
		return connection;
	}
	
	void clearPostac() {
		try {
				deleteAllPostacStmt.executeUpdate();
		} catch (SQLException e) {
				e.printStackTrace();
		}
	}
	
	void deletePostac(long id) {
		try {
			deletePostacStmt.setLong(1, id);
			deletePostacStmt.executeUpdate();
		} catch (SQLException e) {
			e.printStackTrace();
		}
		
	}
	
	public int addPostac(Postac postac) {
		int count = 0;
		try {
				addPostacStmt.setString(1, postac.getGracz());
				addPostacStmt.setString(2, postac.getNazwa());
				//addPostacStmt.setLong(3, postac.getBronId());
				
				count = addPostacStmt.executeUpdate();
				
		} catch (SQLException e) {
				e.printStackTrace();
		}
		return count;
	}
	
	public List<Postac> selectPostac(long id){
		List<Postac> postac = new ArrayList<Postac>();
		
		try {
				ResultSet rs = getAllPostacStmt.executeQuery();
				while (rs.next()) {
						Postac p = new Postac();
						p.setId(rs.getInt("id"));
						p.setGracz(rs.getString("gracz"));
						p.setNazwa(rs.getString("nazwa"));
						p.setBronId(rs.getLong("bronId"));
						if(p.getBronId() == id)
							postac.add(p);
				}
		} catch (SQLException e) {
				e.printStackTrace();
		}
		return postac;
	}
	
	public List<Postac> getAllPostac() {
		List<Postac> postac = new ArrayList<Postac>();
		
		try {
				ResultSet rs = getAllPostacStmt.executeQuery();
				while (rs.next()) {
						Postac p = new Postac();
						p.setId(rs.getInt("id"));
						p.setGracz(rs.getString("gracz"));
						p.setNazwa(rs.getString("nazwa"));
						p.setBronId(rs.getLong("bronId"));
						postac.add(p);
				}
		} catch (SQLException e) {
					e.printStackTrace();
		}
		return postac;
	}
	
	void addID(long id,long bronId){
		try{
				updatePostacStmt.setLong(1, bronId);
				updatePostacStmt.setLong(2, id);
				updatePostacStmt.executeUpdate();
		} catch(SQLException e){
				e.printStackTrace();
		}
	}
	
	void removeID(long id){
		try{
				updatePostacStmt.setObject(1, null);
				updatePostacStmt.setLong(2, id);
				updatePostacStmt.executeUpdate();
		} catch(SQLException e){
				e.printStackTrace();
		}
	}
}
